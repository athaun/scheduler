<%- include('partials/head')%>
<br>

<div class="schedule">
    <div class="day-column">
        <h4>Monday</h4>
        <div class="add-task">
            <input type="text" placeholder="Add item..." inputmode="text" day="Monday">
        </div>
    </div>   
    <div class="day-column">
        <h4>Tuesday</h4>
        <div class="add-task">
            <input type="text" placeholder="Add item..." inputmode="text" day="Tuesday">
        </div>
    </div>   
    <div class="day-column">
        <h4>Wednesday</h4>
        <div class="add-task">
            <input type="text" placeholder="Add item..." inputmode="text" day="Wednesday">
        </div>
    </div>   
    <div class="day-column">
        <h4>Thursday</h4>
        <div class="add-task">
            <input type="text" placeholder="Add item..." inputmode="text" day="Thursday">
        </div>
    </div>   
    <div class="day-column">
        <h4>Friday</h4>
        <div class="add-task">
            <input type="text" placeholder="Add item..." inputmode="text" day="Friday">
        </div>
    </div>   
    <div class="day-column">
        <h4>Saturday</h4>
        <div class="add-task">
            <input type="text" placeholder="Add item..." inputmode="text" day="Saturday">
        </div>
    </div>   
    <div class="day-column">
        <h4>Sunday</h4>
        <div class="add-task">
            <input type="text" placeholder="Add item..." inputmode="text" day="Sunday">
        </div>
    </div>   
</div>
<br>
<div class="schedule">
    <% 
    let days = ["Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday"]
    for (let i = 0; i < days.length; i++) {
        let day = days[i]
    %>
        <div class="day-column">
            <% for (let i = 0; i < persistent.length; i++) { %>
                <% if (persistent[i].days.includes(day)) { %>
                    <div class="task-card" style="border-left: 5px solid <%= persistent[i].color %>" mongo-id="<%= persistent[i]._id %>" title="<%= persistent[i].title %>" description="<%= persistent[i].description %>">
                        <%= persistent[i].title %>
                        <br>
                        <span style="color: #c5ccd8; font-size: 12px;"><%= persistent[i].description %></span>
                    </div>
                <% } %>
            <% } %>
        </div>
    <% } %>
</div>

<br>

<div class="schedule">
    <% 
    for (let i = 0; i < days.length; i++) {
        let day = days[i]
    %>
        <div class="day-column">
            <% for (let i = 0; i < daily.length; i++) { %>
                <% if (daily[i].days.includes(day)) { %>
                    <div class="task-card" style="border-left: 5px solid <%= daily[i].color %>" mongo-id="<%= daily[i]._id %> " title="<%= daily[i].title %>" description="<%= daily[i].description %>" affiliation="<%= daily[i].affiliation %>">
                        <%= daily[i].title %>
                    </div>
                <% } %>
            <% } %>
        </div>
    <% } %>
</div>

<div class="modal fade" id="createModal" tabindex="-1" aria-labelledby="createModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-body">
                <form id="item-form">
                    <input type="text" id="title" name="title" placeholder="Title" required>

                    <textarea id="description" name="description" placeholder="Description" ></textarea>

                    <br><br>

                    <label for="persistentCheckbox">
                        <input type="checkbox" id="persistentCheckbox" name="persistent"> Persistent
                    </label>
                    
                    <div class="color-picker">
                    <label for="colorPicker">Color</label>
                        <input type="color" id="colorPicker">
                        <!-- <div class="color-code">#000000</div> -->
                    </div>                        

                    <label for="affiliation" id="affiliationLabel" style="display:none;">Affiliation</label>
                    <select id="affiliation" name="affiliation" style="display:none;">
                        <% for (let i = 0; i < persistent.length; i++) { %>
                            <option value="<%= persistent[i].title %>"><%= persistent[i].title %></option>
                        <% } %>
                    </select>

                    <br>

                    <label for="daysSelected">Days</label>
                    <select id="daysSelected" name="daysSelected" multiple>
                        <option value="Monday">Monday</option>
                        <option value="Tuesday">Tuesday</option>
                        <option value="Wednesday">Wednesday</option>
                        <option value="Thursday">Thursday</option>
                        <option value="Friday">Friday</option>
                        <option value="Saturday">Saturday</option>
                        <option value="Sunday">Sunday</option>
                    </select>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="submit" form="item-form" class="btn btn-primary" data-bs-dismiss="modal">Create Item</button>
            </div>
        </div>
    </div>
</div>

<div class="modal fade" id="updateModal" tabindex="-1" aria-labelledby="updateModalLabel" aria-hidden="true" mongo-id="null">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-body">
                <form id="update-item-form">
                    <h4 id="affiliation">sdsdf</h4>

                    <input type="text" id="updateTitle" name="title" placeholder="Title" required>
                    
                    <textarea id="updateDescription" name="description" placeholder="Description"></textarea>

                    <br>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-danger" id="deleteTask">Delete</button>
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="submit" form="update-item-form" class="btn btn-primary" data-bs-dismiss="modal">Update Item</button>
            </div>
        </div>
    </div>
</div>

<button id="deleteAllTasks" class="delete-button">Delete All Tasks</button>



<script>

    $(document).ready(function() {
        // Get references to elements
        const persistentCheckbox = $('#persistentCheckbox');
        const colorPicker = $('.color-picker');
        const affiliationLabel = $('#affiliationLabel');
        const affiliationSelect = $('#affiliation');

        // Initial state
        colorPicker.hide(); // Use .hide() to hide elements
        affiliationLabel.show(); // Use .show() to show elements
        affiliationSelect.show();

        // Checkbox change event
        persistentCheckbox.on('change', function() {
            if (this.checked) {
                colorPicker.show();
                affiliationLabel.hide();
                affiliationSelect.hide();
            } else {
                colorPicker.hide();
                affiliationLabel.show();
                affiliationSelect.show();
            }
        });

        // Color picker change event for create modal
        $('input[type="color"]').on('change', function() {
            let color = $(this).val();
            $('.color-code').html(color);
            $('.color').css({ 'background': color });
        });
    })

    $('.add-task input[type="text"]').on('keyup', function(event) {
        if (event.key === 'Enter') {
            let taskName = $(this).val()
            let day = $(this).attr('day')
            
            let capitalizedTitle = taskName.charAt(0).toUpperCase() + taskName.slice(1)
            $('#title').val(capitalizedTitle)
            $('#daysSelected').val(day)
            
            $('#createModal').modal('show')
        }
    });

    // Click event for task cards
    $('.task-card').click(function() {
        const taskId = $(this).attr('mongo-id')
        const taskTitle = $(this).attr('title')
        const taskDescription = $(this).attr('description')
        
        // Populate the modal with task details
        $('#updateTitle').val(taskTitle)
        $('#updateDescription').val(taskDescription)
        $('#updateModal').attr('mongo-id', taskId)
        $('daysSelected').val()

        if ($(this).attr('affiliation')) {
            $('#affiliation').html($(this).attr('affiliation'))
        } else {
            $('#affiliation').html('')
        }
        
        // Show the modal
        $('#updateModal').modal('show')        
    });

    $('#deleteAllTasks').on('click', async function() {
        if (!confirm('Are you sure you want to delete all tasks?')) {
            return
        }
        try {
            const response = await fetch('/api/delete-all-tasks', {
                method: 'DELETE',
            })

            if (response.ok) {
                location.reload()
            } else {
                const errorData = await response.json()
                alert('Error deleting tasks: ' + errorData.message)
            }
        } catch (error) {
            console.error('Error deleting tasks:', error)
            alert('An error occurred while deleting tasks.')
        }
    })

    $("select#daysSelected").mousedown(function(e){
        e.preventDefault();
        
        var select = this
        var scroll = select.scrollTop
        
        e.target.selected = !e.target.selected
        
        setTimeout(function(){select.scrollTop = scroll;}, 0)
        
        $(select).focus();
    }).mousemove(function(e){e.preventDefault()});

    $(document).ready(function() {

    const form = document.getElementById('item-form')

    form.addEventListener('submit', async (event) => {
        event.preventDefault()

        const formData = new FormData(form)
        const data = {}
        formData.forEach((value, key) => {
            data[key] = value
        });

        data['color'] = $("#colorPicker").val()
        data['persistent'] = $("#persistentCheckbox").prop('checked')
        data['days'] = $('#daysSelected').val()

        console.log(data)

        try {
            const response = await fetch('/api/items', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(data)
            });

            if (response.ok) {
                location.reload()
            } else {
                const errorData = await response.json()
                alert('Error creating item: ' + errorData.message)
            }
        } catch (error) {
            console.error('Error creating item:', error)
            alert('An error occurred while creating the item.')
        }
    })

    $('#update-item-form').on('submit', async function(e) {
        e.preventDefault();

        const mongoId = $('#updateModal').attr('mongo-id')

        const formData = new FormData(this);
        const data = {};
        formData.forEach((value, key) => {
            data[key] = value;
        })

        console.log(data)

        try {
            const response = await fetch('/api/items/' + mongoId, {
                method: 'PUT', // Use PUT for updates
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(data)
            });

            if (response.ok) {
                $('#updateModal').modal('hide');

                // sleep for 0.5 seconds to allow modal to close
                await new Promise(r => setTimeout(r, 500));

                location.reload()
            } else {
                const errorData = await response.json()
                alert('Error updating item: ' + errorData.message)
            }
        } catch (error) {
            console.error('Error updating item:', error)
            alert('An error occurred while updating the item.')
        }
    })

    // Delete button click event
    $('#deleteTask').on('click', async function() {
        const mongoId = $('#updateModal').attr('mongo-id')

        try {
            const response = await fetch('/api/items/' + mongoId, {
                method: 'DELETE',
            })

            if (response.ok) {
                $('#updateModal').modal('hide');

                // sleep for 0.5 seconds to allow modal to close
                await new Promise(r => setTimeout(r, 500));
                
                location.reload() 
            } else {
                const errorData = await response.json()
                alert('Error deleting item: ' + errorData.message)
            }
        } catch (error) {
            console.error('Error deleting item:', error)
            alert('An error occurred while deleting the item.')
        }
    })

})
</script>

<%- include('partials/footer')%>